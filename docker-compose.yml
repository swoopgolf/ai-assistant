version: '3.8'

services:
  # Orchestrator Agent (main coordinator)
  orchestrator:
    build: .
    container_name: ai-framework-orchestrator
    ports:
      - "10005:10005"
    environment:
      - AGENT_NAME=orchestrator
      - AGENT_PORT=10005
      - LOG_LEVEL=INFO
    command: ["python", "-m", "orchestrator_agent"]
    volumes:
      - ./logs:/app/logs
      - ./outputs:/app/outputs
      - ./data:/app/data
      - ./sessions:/app/sessions
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:10005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - ai-agents-network
    restart: unless-stopped

  # Agent Template (example/demo)
  agent-template:
    build: .
    container_name: ai-framework-template
    ports:
      - "10100:10100"
    environment:
      - AGENT_NAME=agent_template
      - AGENT_PORT=10100
      - LOG_LEVEL=INFO
    command: ["python", "-m", "agent_template"]
    volumes:
      - ./logs:/app/logs
      - ./sessions:/app/sessions
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:10100/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - ai-agents-network
    restart: unless-stopped

  # MCP Tool Server (common utilities)
  mcp-tool-server:
    build: .
    container_name: ai-framework-mcp-tools
    ports:
      - "11000:11000"
    environment:
      - AGENT_NAME=mcp_tools
      - AGENT_PORT=11000
      - LOG_LEVEL=INFO
    command: ["python", "-m", "common_utils.mcp_server.tool_server"]
    volumes:
      - ./logs:/app/logs
      - ./sessions:/app/sessions
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11000/tools"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - ai-agents-network
    restart: unless-stopped

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-framework-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ai-agents-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: ai-framework-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - ai-agents-network
    restart: unless-stopped

  # OTLP Collector for OpenTelemetry
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: ai-framework-otel
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics endpoint
    volumes:
      - ./monitoring/otel-collector-config.yml:/etc/otel-collector-config.yml
    command: ["--config=/etc/otel-collector-config.yml"]
    networks:
      - ai-agents-network
    restart: unless-stopped

networks:
  ai-agents-network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data: 