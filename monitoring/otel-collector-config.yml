receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

  # Prometheus receiver for scraping metrics
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 10s
          static_configs:
            - targets: ['0.0.0.0:8888']

processors:
  # Add resource attributes
  resource:
    attributes:
      - key: service.name
        value: ai-data-analyst-framework
        action: upsert
      - key: service.version
        value: 1.0.0
        action: upsert

  # Batch processor for performance
  batch:
    timeout: 1s
    send_batch_size: 1024
    send_batch_max_size: 2048

  # Memory limiter to prevent OOM
  memory_limiter:
    limit_mib: 256

exporters:
  # Logging exporter for debugging
  logging:
    loglevel: info

  # Prometheus exporter
  prometheus:
    endpoint: "0.0.0.0:8888"
    const_labels:
      framework: "ai-data-analyst"

  # OTLP exporter for traces (can be configured to send to Jaeger, etc.)
  otlp/jaeger:
    endpoint: http://jaeger:14250
    tls:
      insecure: true

  # File exporter for traces
  file:
    path: /tmp/traces.json

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [memory_limiter, resource, batch]
      exporters: [logging, file]

    metrics:
      receivers: [otlp, prometheus]
      processors: [memory_limiter, resource, batch]
      exporters: [logging, prometheus]

    logs:
      receivers: [otlp]
      processors: [memory_limiter, resource, batch]
      exporters: [logging]

  extensions: [] 